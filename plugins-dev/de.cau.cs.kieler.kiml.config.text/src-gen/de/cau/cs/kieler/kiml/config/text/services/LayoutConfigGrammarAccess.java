/*
* generated by Xtext
*/
package de.cau.cs.kieler.kiml.config.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LayoutConfigGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class KGraphElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KGraphElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataKIdentifierParserRuleCall_1_0 = (RuleCall)cDataAssignment_1.eContents().get(0);
		
		//KGraphElement:
		//
		//	{KNode} data+=KIdentifier*;
		public ParserRule getRule() { return rule; }

		//{KNode} data+=KIdentifier*
		public Group getGroup() { return cGroup; }

		//{KNode}
		public Action getKNodeAction_0() { return cKNodeAction_0; }

		//data+=KIdentifier*
		public Assignment getDataAssignment_1() { return cDataAssignment_1; }

		//KIdentifier
		public RuleCall getDataKIdentifierParserRuleCall_1_0() { return cDataKIdentifierParserRuleCall_1_0; }
	}

	public class KIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdEStringParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPersistentEntriesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPersistentEntriesPersistentEntryParserRuleCall_3_0_0 = (RuleCall)cPersistentEntriesAssignment_3_0.eContents().get(0);
		private final Assignment cPersistentEntriesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPersistentEntriesPersistentEntryParserRuleCall_3_1_0 = (RuleCall)cPersistentEntriesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//KIdentifier:
		//
		//	{KIdentifier} id=EString "{" (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)? "}";
		public ParserRule getRule() { return rule; }

		//{KIdentifier} id=EString "{" (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)? "}"
		public Group getGroup() { return cGroup; }

		//{KIdentifier}
		public Action getKIdentifierAction_0() { return cKIdentifierAction_0; }

		//id=EString
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//EString
		public RuleCall getIdEStringParserRuleCall_1_0() { return cIdEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)?
		public Group getGroup_3() { return cGroup_3; }

		//persistentEntries+=PersistentEntry
		public Assignment getPersistentEntriesAssignment_3_0() { return cPersistentEntriesAssignment_3_0; }

		//PersistentEntry
		public RuleCall getPersistentEntriesPersistentEntryParserRuleCall_3_0_0() { return cPersistentEntriesPersistentEntryParserRuleCall_3_0_0; }

		//persistentEntries+=PersistentEntry*
		public Assignment getPersistentEntriesAssignment_3_1() { return cPersistentEntriesAssignment_3_1; }

		//PersistentEntry
		public RuleCall getPersistentEntriesPersistentEntryParserRuleCall_3_1_0() { return cPersistentEntriesPersistentEntryParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PersistentEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PersistentEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyQualifiedIDParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueQualifiedIDParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PersistentEntry:
		//
		//	key=QualifiedID ":" value=QualifiedID;
		public ParserRule getRule() { return rule; }

		//key=QualifiedID ":" value=QualifiedID
		public Group getGroup() { return cGroup; }

		//key=QualifiedID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//QualifiedID
		public RuleCall getKeyQualifiedIDParserRuleCall_0_0() { return cKeyQualifiedIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=QualifiedID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//QualifiedID
		public RuleCall getValueQualifiedIDParserRuleCall_2_0() { return cValueQualifiedIDParserRuleCall_2_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedID returns ecore::EString:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private KGraphElementElements pKGraphElement;
	private KIdentifierElements pKIdentifier;
	private PersistentEntryElements pPersistentEntry;
	private EStringElements pEString;
	private QualifiedIDElements pQualifiedID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LayoutConfigGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.kiml.config.text.LayoutConfig".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//KGraphElement:
	//
	//	{KNode} data+=KIdentifier*;
	public KGraphElementElements getKGraphElementAccess() {
		return (pKGraphElement != null) ? pKGraphElement : (pKGraphElement = new KGraphElementElements());
	}
	
	public ParserRule getKGraphElementRule() {
		return getKGraphElementAccess().getRule();
	}

	//KIdentifier:
	//
	//	{KIdentifier} id=EString "{" (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)? "}";
	public KIdentifierElements getKIdentifierAccess() {
		return (pKIdentifier != null) ? pKIdentifier : (pKIdentifier = new KIdentifierElements());
	}
	
	public ParserRule getKIdentifierRule() {
		return getKIdentifierAccess().getRule();
	}

	//PersistentEntry:
	//
	//	key=QualifiedID ":" value=QualifiedID;
	public PersistentEntryElements getPersistentEntryAccess() {
		return (pPersistentEntry != null) ? pPersistentEntry : (pPersistentEntry = new PersistentEntryElements());
	}
	
	public ParserRule getPersistentEntryRule() {
		return getPersistentEntryAccess().getRule();
	}

	//EString returns ecore::EString:
	//
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//QualifiedID returns ecore::EString:
	//
	//	ID ("." ID)*;
	public QualifiedIDElements getQualifiedIDAccess() {
		return (pQualifiedID != null) ? pQualifiedID : (pQualifiedID = new QualifiedIDElements());
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
