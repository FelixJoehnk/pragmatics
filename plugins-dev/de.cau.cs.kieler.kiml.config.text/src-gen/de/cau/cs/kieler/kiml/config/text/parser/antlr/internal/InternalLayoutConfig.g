/*
* generated by Xtext
*/
grammar InternalLayoutConfig;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.kieler.kiml.config.text.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.kiml.config.text.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.kiml.config.text.services.LayoutConfigGrammarAccess;

}

@parser::members {

 	private LayoutConfigGrammarAccess grammarAccess;
 	
    public InternalLayoutConfigParser(TokenStream input, LayoutConfigGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "KGraphElement";	
   	}
   	
   	@Override
   	protected LayoutConfigGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleKGraphElement
entryRuleKGraphElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKGraphElementRule()); }
	 iv_ruleKGraphElement=ruleKGraphElement 
	 { $current=$iv_ruleKGraphElement.current; } 
	 EOF 
;

// Rule KGraphElement
ruleKGraphElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKGraphElementAccess().getKNodeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKGraphElementAccess().getDataKIdentifierParserRuleCall_1_0()); 
	    }
		lv_data_1_0=ruleKIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKGraphElementRule());
	        }
       		add(
       			$current, 
       			"data",
        		lv_data_1_0, 
        		"KIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleKIdentifier
entryRuleKIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKIdentifierRule()); }
	 iv_ruleKIdentifier=ruleKIdentifier 
	 { $current=$iv_ruleKIdentifier.current; } 
	 EOF 
;

// Rule KIdentifier
ruleKIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKIdentifierAccess().getKIdentifierAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKIdentifierAccess().getIdEStringParserRuleCall_1_0()); 
	    }
		lv_id_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKIdentifierRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKIdentifierAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getKIdentifierAccess().getPersistentEntriesPersistentEntryParserRuleCall_3_0_0()); 
	    }
		lv_persistentEntries_3_0=rulePersistentEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKIdentifierRule());
	        }
       		add(
       			$current, 
       			"persistentEntries",
        		lv_persistentEntries_3_0, 
        		"PersistentEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKIdentifierAccess().getPersistentEntriesPersistentEntryParserRuleCall_3_1_0()); 
	    }
		lv_persistentEntries_4_0=rulePersistentEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKIdentifierRule());
	        }
       		add(
       			$current, 
       			"persistentEntries",
        		lv_persistentEntries_4_0, 
        		"PersistentEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKIdentifierAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulePersistentEntry
entryRulePersistentEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersistentEntryRule()); }
	 iv_rulePersistentEntry=rulePersistentEntry 
	 { $current=$iv_rulePersistentEntry.current; } 
	 EOF 
;

// Rule PersistentEntry
rulePersistentEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPersistentEntryAccess().getKeyQualifiedIDParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersistentEntryRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"QualifiedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPersistentEntryAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersistentEntryAccess().getValueQualifiedIDParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersistentEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"QualifiedID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleQualifiedID
entryRuleQualifiedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedIDRule()); } 
	 iv_ruleQualifiedID=ruleQualifiedID 
	 { $current=$iv_ruleQualifiedID.current.getText(); }  
	 EOF 
;

// Rule QualifiedID
ruleQualifiedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


