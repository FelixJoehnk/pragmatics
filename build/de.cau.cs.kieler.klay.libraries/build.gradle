/**
 * Gradle script for building and publishing Klay as bundled jar with and without dependencies.
 * 
 * ~/.gradle/gradle.properties:
 * org.gradle.daemon=false
 * signing.keyId=<keyId>
 * signing.password=<pw>
 * signing.secretKeyRingFile=/home/<user>/.gnupg/secring.gpg
 * sonatypeUsername=<username>
 * sonatypePassword=<password>
 */

plugins {
    id 'signing'
    id 'maven'
    // id 'com.github.johnrengelman.shadow' version '1.2.2'
}

group = 'de.cau.cs.kieler'
ext {
    packaging = 'jar'
    libsA = 'fatJar'
    libsB = 'libs'
    libsC = 'libsFormats'
}
version = project.properties['v'] ?: 'nightly-' + getTimeStamp()

allprojects{
    repositories {
        ivy {
            ivyPattern 'http://rtsys.informatik.uni-kiel.de/~kieler/updatesite/nightly/pragmatics/artifacts.jar/artifacts.xml'
            artifactPattern 'http://rtsys.informatik.uni-kiel.de/~kieler/updatesite/nightly/pragmatics/plugins/[artifact](.[classifier])_[revision].jar'
        }
        ivy {
            ivyPattern 'http://rtsys.informatik.uni-kiel.de/~kieler/repository/luna441/artifacts.jar/artifacts.xml'
            artifactPattern 'http://rtsys.informatik.uni-kiel.de/~kieler/repository/luna441/plugins/[artifact](.[classifier])_[revision].jar'
        }
        mavenCentral()
        jcenter()
    }
}

configurations {
    klay
    klayExtra
    formats
    formatsExtra
    json
    jsonExtra
}

dependencies {
    klay dep('de.cau.cs.kieler:de.cau.cs.kieler.core:[0,)')
    klay dep('de.cau.cs.kieler:de.cau.cs.kieler.core.kgraph:[0,)')
    klay dep('de.cau.cs.kieler:de.cau.cs.kieler.kiml:[0,)')
    klay dep('de.cau.cs.kieler:de.cau.cs.kieler.klay.force:[0,)')
    klay dep('de.cau.cs.kieler:de.cau.cs.kieler.klay.layered:[0,)')
    klay dep('de.cau.cs.kieler:de.cau.cs.kieler.klay.tree:[0,)')

    klayExtra dep('org.eclipse.emf:org.eclipse.emf.common:[0,)')
    klayExtra dep('org.eclipse.emf:org.eclipse.emf.ecore:[0,)')
    klayExtra dep('org.eclipse.emf:org.eclipse.emf.ecore.xmi:[0,)')
    klayExtra dep('com.google.guava:guava:[0,)')

    formats dep('de.cau.cs.kieler:de.cau.cs.kieler.kiml.formats:[0,)')
    // only with short name on mvn central
    formatsExtra dep('org.eclipse.equinox:org.eclipse.equinox.app:[0,)')
    formatsExtra dep('org.eclipse.equinox:org.eclipse.equinox.common:[0,)')
    formatsExtra dep('org.eclipse.equinox:org.eclipse.equinox.registry:[0,)')
    formatsExtra dep('org.eclipse:org.eclipse.osgi:[0,)')

    json dep('de.cau.cs.kieler:de.cau.cs.kieler.kiml.formats.json:[0,)')
    jsonExtra dep('org.eclipse.xtend:org.eclipse.xtend.lib:[0,)')
    jsonExtra dep('org.eclipse.xtext:org.eclipse.xtext.xbase.lib:[0,)')
}

def deps = configurations.findAll{it.name =~ /^(klay|formats|json)$/}.collect{it.dependencies.collect()}.flatten()
def depFiles = configurations.findAll{it.name =~ /^(klay|formats|json)$/}.collect{it.collect{file(it)}}.flatten()

task asdf << {
    deps.each{println it}
    depFiles.each{println it}
    new java.util.jar.JarFile(depFiles[0]).manifest.mainAttributes.entrySet().each {println "${it.key}: ${it.value}"}
    // println configurations.findAll{it.name =~ /^(klay|formats|json)$/}.collect{c->c.dependencies.collect()}.flatten()
    // configurations.findAll{it.name =~ /^(klay|formats|json)$/}.each {c -> c.each{f-> println f}}
    // println configurations.findAll{it.name =~ /^(klay|formats|json)$/}.collect {c -> c.collect()}.flatten()
    // println configurations.findAll{it.name =~ /^(klay|formats|json)$/}.each{it.dependencies.each{println it}}
    // configurations.archives.each {a -> println a}
    // configurations.klay.fileCollection.each{e-> println e}
}

// Part A: bundled klay
// --------------------------------------------------------

def theIncludes = [
    '**/*.class',
    'META-INF/**',
    'epl-v10.html'
]

def theExcludes = [
    'images/**',
    'java/**',
    'javax/**',
    'model/**',
    'schema/**'
]
task fatKlay(type: Jar) {
    destinationDir file("$buildDir/$libsA")
    baseName = "klay"
    classifier = ''
    from "$rootDir/epl-v10.html"
    from { configurations.klay.collect { it.isDirectory() ? it : zipTree(it) } }
    include theIncludes
    exclude theExcludes
}

task fatKlayEMF(type: Jar) {
    destinationDir file("$buildDir/$libsA")
    baseName = "klay"
    classifier = 'all'
    from "$rootDir/epl-v10.html"
    from { configurations.klay.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.klayExtra.collect { it.isDirectory() ? it : zipTree(it) } }
    include theIncludes
    exclude theExcludes
}

// Part B: klay plugins
// --------------------------------------------------------

def klayPlugins = [
    configurations.klay,
    configurations.klayExtra
]

task copyKlayPlugins(type: Copy) {
    from klayPlugins
    into "$buildDir/$libsB"
}

task zipKlayPlugins(type: Zip) {
    archiveName "${libsB}.zip"
    destinationDir buildDir
    from klayPlugins
}

// Part C: klay plugins with formats & json
// --------------------------------------------------------

def formatsPlugins = [
    configurations.klay,
    configurations.klayExtra,
    configurations.formats,
    configurations.formatsExtra,
    configurations.json,
    configurations.jsonExtra,
    ":nonosgi:jar"
]

task copyFormatsPlugins(type: Copy, dependsOn: ":nonosgi:jar") {
    from formatsPlugins
    into "$buildDir/$libsC"
}

task zipFormatsPlugins(type: Zip, dependsOn: ":nonosgi:jar") {
    archiveName "${libsC}.zip"
    destinationDir buildDir
    from formatsPlugins
}

// artifacts {
//     depFiles.each{archives it}
//     // archives configurations.findAll{it.name =~ /^(klay|formats|json)$/}.collect{it.collect{file(it)}}.flatten()
//     // archives sourcesJar
//     // archives javadocJar
// }

// signing {
//     sign configurations.archives
// }

// uploadArchives {
//     repositories {
//         mavenDeployer {
//             beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

//             repository(url: "file://${project.rootProject.buildDir}/repo") {
//               // authentication(userName: sonatypeUsername, password: sonatypePassword)
//             }

//             println "publishing:"
//             deps.eachWithIndex{dep, i ->
//                 println "dep: $dep"
//                 println "i:   $i"
//                 addFilter(dep.name) { artifact, file ->
//                     println artifact
//                     println file
//                 }
//                 // def manif = "${depFiles[i]}/META-INF/MANIFEST.MF"
//                 def manif = new java.util.jar.JarFile(depFiles[i]).manifest
//                 manif.mainAttributes.entrySet().each {details ->
//                     switch (details.key) {
//                         case ~/Bundle-Name/:
//                             pom(dep.name).name = details.value
//                             break
//                         case ~/Bundle-Version/:
//                             pom(dep.name).version = details.value
//                             break
//                     }
//                 }
//                 //     }
//                 // } else {
//                 //     pom(dep.name).name = dep.name
//                 // }
//             }

//             pom.project {
//                 packaging 'jar'
//                 url 'http://rtsys.informatik.uni-kiel.de/kieler'

//                 licenses {
//                     license {
//                         name 'Eclipse Public License - v 1.0'
//                         url 'http://www.eclipse.org/org/documents/epl-v10.html'
//                     }
//                 }
//             }
//         }
//     }
// }

def getTimeStamp() {
    return new Date().format('yyyyMMddHHmmss')
}

def dep(coords, javadoc = false, source = false) {
    def result = [dependencies.create(coords)]
    if (javadoc) result << dependencies.create("$coords:javadoc")
    if (source) result << dependencies.create("$coords:source")
    result
}
