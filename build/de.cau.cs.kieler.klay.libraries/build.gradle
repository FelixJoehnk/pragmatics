/**
 * Gradle script for building and publishing Klay as bundled jar with and without dependencies.
 * 
 * ~/.gradle/gradle.properties:
 * org.gradle.daemon=false
 * signing.keyId=<keyId>
 * signing.password=<pw>
 * signing.secretKeyRingFile=/home/<user>/.gnupg/secring.gpg
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        classpath 'org.xtend:xtend-gradle-plugin:0.4.7'
    }
}

allprojects {
    group = 'de.cau.cs.kieler'
    ext.packaging = 'jar'
    version = project.properties['v'] ?: 'NIGHTLY-' + getTimeStamp()

    task hello << { task ->
        println "Hello, I'm $task.project.name"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven'

    repositories {
        mavenCentral()
        jcenter()
    }

// lib jars -----------------------------------------------

    jar { afterEvaluate {project ->
        baseName = project.projectBaseName
        from project.sourceSets.main.output
    }}

// source jars --------------------------------------------

    task sourcesJar (type: Jar) { afterEvaluate {project ->
        baseName = project.projectBaseName
        classifier = 'sources'
        from project.sourceSets.main.allSource
    }}


// javadoc ------------------------------------------------

    task javadoc (type: Javadoc, overwrite: true) { afterEvaluate {project ->
        source = project.sourceSets.main.allJava
        failOnError = false
    }}

    // javadoc jars -------------------------------------------

    task javadocJar (type: Jar, dependsOn: javadoc) { afterEvaluate {project ->
        baseName = project.projectBaseName
        classifier = 'javadoc'
        from javadoc.destinationDir
    }}

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                afterEvaluate {project ->
                    repository(url: "file://${project.rootProject.buildDir}/repo") {
                      // authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }
                    pom.project {
                        name project.pomName
                        packaging 'jar'
                        description project.pomDescr
                        url 'http://rtsys.informatik.uni-kiel.de'

                        licenses {
                            license {
                                name 'Eclipse Public License - v 1.0'
                                url 'http://www.eclipse.org/org/documents/epl-v10.html'
                            }
                        }
                    }
                }
            }
        }
    }
}

def getTimeStamp() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
