/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kiml.config.text.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.kiml.config.text.services.LayoutConfigGrammarAccess;
import java.util.Set;
import org.eclipse.elk.core.klayoutdata.KIdentifier;
import org.eclipse.elk.core.klayoutdata.KLayoutDataPackage;
import org.eclipse.elk.graph.KGraphPackage;
import org.eclipse.elk.graph.KNode;
import org.eclipse.elk.graph.PersistentEntry;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractLayoutConfigSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LayoutConfigGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KGraphPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KGraphPackage.KNODE:
				sequence_KGraphElement(context, (KNode) semanticObject); 
				return; 
			case KGraphPackage.PERSISTENT_ENTRY:
				sequence_PersistentEntry(context, (PersistentEntry) semanticObject); 
				return; 
			}
		else if (epackage == KLayoutDataPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KLayoutDataPackage.KIDENTIFIER:
				sequence_KIdentifier(context, (KIdentifier) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     KGraphElement returns KNode
	 *
	 * Constraint:
	 *     data+=KIdentifier*
	 */
	protected void sequence_KGraphElement(ISerializationContext context, KNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KIdentifier returns KIdentifier
	 *
	 * Constraint:
	 *     (id=ID (persistentEntries+=PersistentEntry persistentEntries+=PersistentEntry*)?)
	 */
	protected void sequence_KIdentifier(ISerializationContext context, KIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PersistentEntry returns PersistentEntry
	 *
	 * Constraint:
	 *     (key=QualifiedID value=PropertyValue)
	 */
	protected void sequence_PersistentEntry(ISerializationContext context, PersistentEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KGraphPackage.Literals.PERSISTENT_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KGraphPackage.Literals.PERSISTENT_ENTRY__KEY));
			if (transientValues.isValueTransient(semanticObject, KGraphPackage.Literals.PERSISTENT_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KGraphPackage.Literals.PERSISTENT_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersistentEntryAccess().getKeyQualifiedIDParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getPersistentEntryAccess().getValuePropertyValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
